{"version":3,"sources":["App.js","index.js"],"names":["App","useState","jsonVal","setJsonVal","isLoading","setIsLoading","hasError","setHasError","isSetup","setIsSetup","useEffect","queryParams","URLSearchParams","window","location","search","get","data","jsonString","Buffer","from","JSON","parse","e","alert","console","log","size","centered","show","onHide","Header","Title","id","rel","href","integrity","crossOrigin","bg","variant","sticky","Brand","alt","src","width","height","className","style","paddingBottom","value","onChange","fixed","onClick","request","XMLHttpRequest","open","process","setRequestHeader","f","i","params","content","stringify","send","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAkKeA,IA5JH,WACV,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACR,IAAMC,EAAc,IAAIC,gBAAgBC,OAAOC,SAASC,QAExD,GADcJ,EAAYK,IAAI,SAE5BP,GAAW,OADb,CAIA,IAAMQ,EAAON,EAAYK,IAAI,QAC7B,GAAKC,EAAL,CAIA,IAAMC,EAAaC,EAAOC,KAAKH,EAAM,UACrC,IACEd,EAAWkB,KAAKC,MAAMJ,IACtB,MAAOK,GACPC,MACE,+IARFjB,GAAY,MAWb,IAkBHkB,QAAQC,IAAIxB,GAYZ,OAAIM,EAEA,cAAC,IAAD,CACEmB,KAAK,KACL,kBAAgB,gCAChBC,UAAQ,EACRC,MAAI,EACJC,OAAQ,aALV,SAOE,cAAC,IAAMC,OAAP,UACE,cAAC,IAAMC,MAAP,CAAaC,GAAG,gCAAhB,6CAQJ3B,EAEA,cAAC,IAAD,CACEqB,KAAK,KACL,kBAAgB,gCAChBC,UAAQ,EACRC,MAAI,EACJC,OAAQ,aALV,SAOE,cAAC,IAAMC,OAAP,UACE,cAAC,IAAMC,MAAP,CAAaC,GAAG,gCAAhB,sDAQJ7B,EAEA,cAAC,IAAD,CACEuB,KAAK,KACL,kBAAgB,gCAChBC,UAAQ,EACRC,MAAI,EACJC,OAAQ,aALV,SAOE,cAAC,IAAMC,OAAP,UACE,cAAC,IAAMC,MAAP,CAAaC,GAAG,gCAAhB,8EASN,qCACE,+BACE,sBACEC,IAAI,aACJC,KAAK,0EACLC,UAAU,0EACVC,YAAY,gBAGhB,cAAC,IAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MAAxC,SACE,cAAC,IAAD,UACE,eAAC,IAAOC,MAAR,CAAcN,KAAK,QAAnB,UACE,qBACEO,IAAI,GACJC,IAAI,8FACJC,MAAM,KACNC,OAAO,KACPC,UAAU,6BACT,IAPL,mCAaJ,sBAAMC,MAAO,CAAEC,cAAe,QAA9B,SACG9C,GACC,cAAC,IAAD,CACA+C,MAAO/C,EACPgD,SAAU/C,MAId,iCACE,cAAC,IAAD,CAAQmC,GAAG,OAAOC,QAAQ,OAAOY,MAAM,SAAvC,SACE,cAAC,IAAD,UACE,cAAC,IAAOV,MAAR,CAAcN,KAAK,QAAQiB,QAtHjB,WAClB,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,OAAQC,4HACrBH,EAAQI,iBAAiB,eAAgB,oBAEzC,IAAM9C,EAAc,IAAIC,gBAAgBC,OAAOC,SAASC,QAElD2C,EAAI/C,EAAYK,IAAI,KACpB2C,EAAIhD,EAAYK,IAAI,KACpB4C,EAAS,CACbC,QAAQ,GAAD,OAAKH,EAAL,eAAaC,EAAb,eAAqBtC,KAAKyC,UAAU5D,KAE7CmD,EAAQU,KAAK1C,KAAKyC,UAAUF,IAC5BvD,GAAa,IAyGL,sE,yDCxJZ,2DAIA2D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3cea0b6f.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Container, Navbar, Modal } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { JsonEditor as Editor } from 'jsoneditor-react';\nimport 'jsoneditor-react/es/editor.min.css';\n\nconst App = () => {\n  const [jsonVal, setJsonVal] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const [hasError, setHasError] = useState(false);\n  const [isSetup, setIsSetup] = useState(false);\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(window.location.search);\n    const setup = queryParams.get(\"setup\");\n    if (setup) {\n      setIsSetup(true);\n      return;\n    }\n    const data = queryParams.get(\"data\");\n    if (!data) {\n      setHasError(true);\n      return;\n    }\n    const jsonString = Buffer.from(data, \"base64\");\n    try {\n      setJsonVal(JSON.parse(jsonString));\n    } catch (e) {\n      alert(\n        \"Failed to set get JSON info, please try reclicking the discord link. If this problem persists, please contact @Developers for support\"\n      );\n    }\n  }, []);\n\n  const sendMessage = () => {\n    const request = new XMLHttpRequest();\n    request.open(\"POST\", process.env.REACT_APP_WEBHOOK_URL);\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n\n    const queryParams = new URLSearchParams(window.location.search);\n\n    const f = queryParams.get(\"f\");\n    const i = queryParams.get(\"i\");\n    const params = {\n      content: `${f} && ${i} && ${JSON.stringify(jsonVal)}`,\n    };\n    request.send(JSON.stringify(params));\n    setIsLoading(true);\n  };\n\n  console.log(jsonVal)\n\n  const onChange = ({\n    updated_src,\n    name,\n    namespace,\n    new_value,\n    existing_value,\n  }) => {\n    setJsonVal(updated_src);\n  };\n\n  if (isSetup) {\n    return (\n      <Modal\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show\n        onHide={() => {}}\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            You are successfully setup!\n          </Modal.Title>\n        </Modal.Header>\n      </Modal>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <Modal\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show\n        onHide={() => {}}\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Please click the link from the embed\n          </Modal.Title>\n        </Modal.Header>\n      </Modal>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Modal\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show\n        onHide={() => {}}\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Sent your file to be uploaded, you may close your browser :)\n          </Modal.Title>\n        </Modal.Header>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      <head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\"\n          integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\"\n          crossOrigin=\"anonymous\"\n        />\n      </head>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            <img\n              alt=\"\"\n              src=\"https://cdn.discordapp.com/icons/733117510420791358/a_2a2e9349029a56a1da08e999e0ac31e1.webp\"\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{\" \"}\n            GCG Price Sheet Modifiers\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      <body style={{ paddingBottom: \"56px\" }}>\n        {jsonVal && (\n          <Editor\n          value={jsonVal}\n          onChange={setJsonVal}\n      />\n        )}\n      </body>\n      <footer>\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"bottom\">\n          <Container>\n            <Navbar.Brand href=\"#home\" onClick={sendMessage}>\n              Click here to automatically upload this file\n            </Navbar.Brand>\n          </Container>\n        </Navbar>\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}